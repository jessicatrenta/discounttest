"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConditionalStyle = isConditionalStyle;
exports.Style = void 0;

var _memoize = require("./memoize");

var _isEqual = require("./isEqual");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var MAX_CACHE_SIZE = 50;
var MEMOIZE_OPTIONS = {
  equalityCheck: _isEqual.isEqual,
  maxSize: MAX_CACHE_SIZE
};

/**
 * Style is a helper for authoring conditional values for prop styles.
 * Write complex conditional styles based on one or more conditions (viewport
 * sizes and interactive states) in a concise and expressive way.
 */
var Style = {
  /**
   * Sets an optional default value to use when no other condition is met.
   *
   * @param defaultValue The default value
   * @returns The chainable condition style
   */
  "default": (0, _memoize.memoize)(function (defaultValue) {
    return createChainableConditionalStyle({
      "default": defaultValue,
      conditionals: []
    });
  }, MEMOIZE_OPTIONS),

  /**
   * Adjusts the style based on different conditions. All conditions, expressed
   * as a literal object, must be met for the associated value to be applied.
   *
   * The `when` method can be chained together to build more complex styles.
   *
   * @param conditions The condition(s)
   * @param value The conditional value that can be applied if the conditions are met
   * @returns The chainable condition style
   */
  when: (0, _memoize.memoize)(when, MEMOIZE_OPTIONS)
};
exports.Style = Style;

function when(conditions, value) {
  if (isConditionalStyle(this)) {
    return createChainableConditionalStyle({
      "default": this["default"],
      conditionals: [].concat(_toConsumableArray(this.conditionals), [{
        conditions: conditions,
        value: value
      }])
    });
  } else {
    return createChainableConditionalStyle({
      conditionals: [{
        conditions: conditions,
        value: value
      }]
    });
  }
}

function createChainableConditionalStyle(conditionalStyle) {
  var proto = {};
  var returnConditionalStyle = Object.create(proto);
  Object.assign(returnConditionalStyle, conditionalStyle);
  proto.when = (0, _memoize.memoize)(when.bind(returnConditionalStyle), MEMOIZE_OPTIONS);
  return returnConditionalStyle;
}

function isConditionalStyle(value) {
  return value !== null && _typeof(value) === 'object' && 'conditionals' in value;
}